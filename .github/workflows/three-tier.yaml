name: Deploy MERN Stack to EC2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up AWS CLI
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1  

    # Step 3: Login to Amazon ECR
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 463470985622.dkr.ecr.ap-south-1.amazonaws.com

    # Step 4: Build and push frontend Docker image to ECR
    - name: Build and push frontend Docker image to ECR
      run: |
        cd frontend
        aws ecr-public get-login-password --region ap-south-1 | docker login --username AWS --password-stdin public.ecr.aws/u5f3a6m4
        docker build -t 3-tier-frontend .
        docker tag 3-tier-frontend:latest public.ecr.aws/u5f3a6m4/3-tier-frontend:latest
        docker push public.ecr.aws/u5f3a6m4/3-tier-frontend:latest

    # Step 5: Build and push backend Docker image to ECR
    - name: Build and push backend Docker image to ECR
      run: |
        cd backend
        aws ecr-public get-login-password --region ap-south-1 | docker login --username AWS --password-stdin public.ecr.aws/u5f3a6m4
        docker build -t 3-tier-backend .
        docker tag 3-tier-backend:latest public.ecr.aws/u5f3a6m4/3-tier-backend:latest
        docker push public.ecr.aws/u5f3a6m4/3-tier-backend:latest

    # Step 6: Set up SSH for EC2 access
    - name: Set up SSH key
      run: |
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > mykey.pem
        chmod 400 mykey.pem
        ssh -i "mykey.pem" ubuntu@ec2-13-232-193-75.ap-south-1.compute.amazonaws.com

    # Step 7: SSH into EC2 and install Docker
    - name: Install Docker on EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ec2-user  # Update to the appropriate username (e.g., ubuntu for Ubuntu AMI)
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          # Install Docker
          sudo apt update -y
          sudo apt install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
          
          # Add ec2-user to the Docker group to avoid using sudo
          sudo usermod -aG docker ec2-user
          newgrp docker  # Refresh the group membership

    # Step 8: SSH into EC2 to pull images from ECR and run containers
    - name: Deploy Docker containers on EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ec2-user  # Update to the appropriate username
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          # Login to ECR and pull the latest images
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 463470985622.dkr.ecr.ap-south-1.amazonaws.com
          docker pull 463470985622.dkr.ecr.ap-south-1.amazonaws.com/frontend:latest
          docker pull 463470985622.dkr.ecr.ap-south-1.amazonaws.com/backend:latest
          docker pull mongo:latest  # Pull the latest MongoDB image
          export MONGO_USERNAME=${{ secrets.MONGO_USERNAME }}
          export MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}
          # Run the containers (Frontend, Backend, MongoDB)
          docker run -d --name mongo -p 27017:27017 mongo:latest
          docker run -d --name backend -p 8080:8080 --link mongo:mongodb 463470985622.dkr.ecr.ap-south-1.amazonaws.com/backend:latest
          docker run -d --name frontend -p 3000:3000 --link backend:backend 463470985622.dkr.ecr.ap-south-1.amazonaws.com/frontend:latest
